name: CI

'on':
    pull_request:
    push:
        branches:
          - master
          - develop
          - feature/**

env:
    UBSAN_OPTIONS: print_stacktrace=1

jobs:
    posix:
        strategy:
            fail-fast: false
            matrix:
                include:
                  - cmake-flags: >-
                        -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14
                        -DUSERVER_SANITIZE="ub addr"
                        -DCMAKE_BUILD_TYPE=Debug
                    os: ubuntu-22.04
                    info: clang-14 + debug + sanitize addr+ub
                    tests-flags: ''

                  - cmake-flags: >-
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0 -DUSERVER_FEATURE_REDIS_HI_MALLOC=1
                        -DUSERVER_NO_WERROR=1 -DUSERVER_SANITIZE="ub addr" -DCMAKE_BUILD_TYPE=Debug
                    os: ubuntu-20.04
                    info: g++-9 + debug + sanitize addr+ub
                    tests-flags: '--gtest_filter=-HttpClient.Cancel*:HttpClient.Retr*:HttpClient.RedirectHeaders'

                  - cmake-flags: >-
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0 -DUSERVER_FEATURE_REDIS_HI_MALLOC=1
                        -DUSERVER_NO_WERROR=1 -DCMAKE_BUILD_TYPE=Release
                    os: ubuntu-20.04
                    info: g++-9 + release
                    tests-flags: '--gtest_filter=-HttpClient.RedirectHeaders'

                  - cmake-flags: >-
                        -DCMAKE_CXX_COMPILER=g++-8 -DCMAKE_C_COMPILER=gcc-8
                        -DUSERVER_FEATURE_MONGODB=0
                        -DUSERVER_FEATURE_POSTGRESQL=0
                        -DUSERVER_FEATURE_GRPC=0
                        -DUSERVER_FEATURE_CRYPTOPP_BLAKE2=0
                        -DUSERVER_USE_LD=gold -DCMAKE_BUILD_TYPE=Release
                    os: ubuntu-18.04
                    info: g++-8 + release
                    tests-flags: '--gtest_filter=-FormatsYaml.NativeLocation:FormatsYaml.NullAsDefaulted'

        name: '${{matrix.os}}: ${{matrix.info}}'
        runs-on: ${{matrix.os}}

        steps:
          - uses: actions/checkout@v2

          - name: Reuse ccache directory
            uses: actions/cache@v2
            with:
                path: ~/.ccache
                key: '${{matrix.os}} ${{matrix.info}} ccache-dir ${{github.ref}} run-${{github.run_number}}'
                restore-keys: |
                    ${{matrix.os}} ${{matrix.info}} ccache-dir ${{github.ref}} run-'
                    ${{matrix.os}} ${{matrix.info}} ccache-

          - name: Install packages
            run: |
                # Instructions from https://clickhouse.com/docs/en/getting-started/install/
                sudo apt-get install -y apt-transport-https ca-certificates dirmngr
                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8919F6BD2B48D754
                echo "deb https://packages.clickhouse.com/deb stable main" | sudo tee /etc/apt/sources.list.d/clickhouse.list

                sudo apt update
                sudo apt install --allow-downgrades -y clickhouse-common-static $(cat scripts/docs/en/deps/${{matrix.os}}.md | tr '\n' ' ')

          - name: Install RabbitMQ packages
            run: |
                # convoluted setup of rabbitmq + erlang taken from https://www.rabbitmq.com/install-debian.html#apt-quick-start-packagecloud
                ## Team RabbitMQ's main signing key
                curl -1sLf "https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null
                ## Launchpad PPA that provides modern Erlang releases
                curl -1sLf "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xf77f1eda57ebb1cc" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg > /dev/null
                ## PackageCloud RabbitMQ repository
                curl -1sLf "https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg > /dev/null
                ## Add apt repositories maintained by Team RabbitMQ
                sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF
                ## Provides modern Erlang/OTP releases
                ##
                ## "bionic" as distribution name should work for any reasonably recent Ubuntu or Debian release.
                ## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
                deb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu bionic main
                deb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu bionic main
                ## Provides RabbitMQ
                ##
                ## "bionic" as distribution name should work for any reasonably recent Ubuntu or Debian release.
                ## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
                deb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ bionic main
                deb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ bionic main
                EOF
                ## Install Erlang packages
                sudo apt-get install -y erlang-base \
                                erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \
                                erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \
                                erlang-runtime-tools erlang-snmp erlang-ssl \
                                erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl
                # hackery to disable autostart at installation https://askubuntu.com/questions/74061/install-packages-without-starting-background-processes-and-services
                mkdir /tmp/fake && ln -s /bin/true/ /tmp/fake/initctl && \
                                ln -s /bin/true /tmp/fake/invoke-rc.d && \
                                ln -s /bin/true /tmp/fake/restart && \
                                ln -s /bin/true /tmp/fake/start && \
                                ln -s /bin/true /tmp/fake/stop && \
                                ln -s /bin/true /tmp/fake/start-stop-daemon && \
                                ln -s /bin/true /tmp/fake/service && \
                                ln -s /bin/true /tmp/fake/deb-systemd-helper
                sudo PATH=/tmp/fake:$PATH apt-get install -y rabbitmq-server

          - name: Setup ccache
            run: |
                ccache -M 2.0GB
                ccache -s

          - name: Run cmake
            run: |
                mkdir build_debug
                cd build_debug
                cmake ${{matrix.cmake-flags}} ..

          - name: Compile
            run: |
                pwd
                cd build_debug
                make -j$(nproc)

          - name: Run tests (universal)
            run: |
                cd build_debug
                ./userver/universal/userver-universal_unittest ${{matrix.tests-flags}}

          - name: Run tests (core)
            run: |
                cd build_debug
                ./userver/core/userver-core_unittest ${{matrix.tests-flags}}

          - name: Run tests (clickhouse)
            run: |
                cd build_debug
                mkdir userver/clickhouse || :
                cd userver/clickhouse
                ctest -V

          - name: Run tests (rabbitmq)
            run: |
                cd build_debug
                mkdir userver/rabbitmq || :
                cd userver/rabbitmq
                ctest -V

          - name: Run tests (postgresql)
            run: |
                cd build_debug
                mkdir userver/postgresql || :
                cd userver/postgresql
                ctest -V

          - name: Run tests (redis)
            run: |
                cd build_debug/userver/redis/
                ctest -V

          - name: Run tests (mongo)
            # libbson unnecessarily overaligns structures and GCC-9 does not support overaligned new
            if: matrix.info != 'g++-9 + debug + sanitize addr+ub'
            run: |
                cd build_debug
                mkdir userver/mongo || :
                cd userver/mongo
                if [ -f ./userver-mongo_unittest ]; then ./userver-mongo_unittest ; fi
                # Mongo is not available on Ubuntu 22.04 from default repos
                if [ "${{matrix.os}}" != "ubuntu-22.04" ]; then ctest -V -R userver-mongo_mongotest ; fi

          - name: Run tests (gRPC)
            # TODO: Sanitizer detects bool with value other than 1 or 0
            if: matrix.info != 'clang-14 + debug + sanitize addr+ub'
            run: |
                cd build_debug
                mkdir userver/grpc || :
                cd userver/grpc
                ctest -V

          - name: Run clang-tidy
            if: matrix.info == 'clang-14 + debug + sanitize addr+ub'
            # TODO: add clang-tidy-diff.py after establishing baseline
            run: |
                sudo apt install -y clang-tidy-14
                python3 ./tools/run-clang-tidy -clang-tidy-binary clang-tidy-14 -p build_debug -q -j$(nproc)
